caching ideas


import httpx
import time
import jwt
import logging
from fastapi import Request, HTTPException
from typing import Dict

# Configuration
JWKS_URL = "https://example.com/.well-known/jwks.json"
ALGORITHM = "RS256"
ISSUER = "https://example.com/"
AUDIENCE = "my-api"

logger = logging.getLogger(__name__)

# JWKS cache with TTL
JWKS_CACHE: Dict[str, any] = {"jwks": None, "timestamp": 0}
JWKS_TTL_SECONDS = 3600  # 1 hour

def get_jwks():
    now = time.time()
    if JWKS_CACHE["jwks"] is None or now - JWKS_CACHE["timestamp"] > JWKS_TTL_SECONDS:
        response = httpx.get(JWKS_URL)
        if response.status_code != 200:
            raise Exception("Failed to fetch JWKS")
        JWKS_CACHE["jwks"] = response.json()
        JWKS_CACHE["timestamp"] = now
        logger.info("Fetched new JWKS")
    else:
        logger.info("Using cached JWKS")
    return JWKS_CACHE["jwks"]

def get_signing_key(kid: str):
    jwks = get_jwks()
    for key in jwks.get("keys", []):
        if key.get("kid") == kid:
            logger.info(f"Matched key ID: {kid}")
            return key
    raise HTTPException(status_code=401, detail="Public key not found for kid from token")

def verify_jwt(request: Request):
    auth_header = request.headers.get("Authorization")
    if not auth_header or not auth_header.startswith("Bearer "):
        logger.info(f"Missing or invalid token: {auth_header}")
        raise HTTPException(status_code=401, detail="Missing or invalid token")

    token = auth_header.split(" ")[1]

    try:
        unverified_header = jwt.get_unverified_header(token)
        logger.info(f"Unverified header: {unverified_header}")

        signing_key = get_signing_key(unverified_header["kid"])
        logger.info(f"Signing key used: {signing_key}")

        payload = jwt.decode(
            token,
            key=jwt.algorithms.RSAAlgorithm.from_jwk(signing_key),
            algorithms=[ALGORITHM],
            issuer=ISSUER,
            audience=AUDIENCE
        )
        return payload

    except jwt.ExpiredSignatureError:
        logger.info("Token has expired")
        raise HTTPException(status_code=401, detail="Token expired")

    except jwt.InvalidTokenError as e:
        logger.info(f"Invalid token: {str(e)}")
        raise HTTPException(status_code=401, detail="Invalid token")




=====


import pytest
from fastapi import Request
from starlette.datastructures import Headers
from your_module import verify_jwt  # replace with your actual module name

class DummyRequest:
    def __init__(self, token):
        self.headers = Headers({"Authorization": f"Bearer {token}"})

def test_invalid_token_format():
    request = DummyRequest("invalid.token.here")
    with pytest.raises(Exception) as exc_info:
        verify_jwt(request)
    assert "Invalid token" in str(exc_info.value)

def test_missing_token():
    request = DummyRequest("")
    with pytest.raises(Exception) as exc_info:
        verify_jwt(request)
    assert "Missing or invalid token" in str(exc_info.value)



=====


import pytest
from starlette.requests import Request
from starlette.datastructures import Headers
from starlette.testclient import TestClient
from fastapi import FastAPI
from utils.ip_utils import get_client_ip  # your utility

# Create a dummy FastAPI app to generate a Request object
app = FastAPI()

@app.get("/test-ip")
def test_ip(request: Request):
    return {"ip": get_client_ip(request)}

client = TestClient(app)

def test_get_client_ip_with_forwarded_for():
    response = client.get("/test-ip", headers={"x-forwarded-for": "192.168.1.1"})
    assert response.json()["ip"] == "192.168.1.1"

def test_get_client_ip_without_forwarded_for():
    response = client.get("/test-ip")
    ip = response.json()["ip"]
    assert isinstance(ip, str)
    assert ip != ""  # just make sure it's not empty

