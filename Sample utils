from playwright.sync_api import sync_playwright

# fallback paths if channel is not supported in your Playwright build
CHROME_PATHS = [
    r"C:\Program Files\Google\Chrome\Application\chrome.exe",  # Windows
    r"/usr/bin/google-chrome",                                 # Linux
    r"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",  # Mac
]

EDGE_PATHS = [
    r"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe",  # Windows
    r"/usr/bin/microsoft-edge",                                       # Linux
]


def get_browser(p, browser_choice: str):
    """Launch system-installed browser (Chrome/Edge) with fallback paths."""
    browser_choice = browser_choice.lower()

    try:
        if browser_choice == "chrome":
            return p.chromium.launch(channel="chrome", headless=True)
        elif browser_choice == "msedge":
            return p.chromium.launch(channel="msedge", headless=True)
    except NotImplementedError:
        # Fallback to executable_path if channel not supported
        paths = CHROME_PATHS if browser_choice == "chrome" else EDGE_PATHS
        for path in paths:
            try:
                return p.chromium.launch(executable_path=path, headless=True)
            except Exception:
                continue
        raise RuntimeError(f"{browser_choice} not found on this system.")

    raise ValueError(f"Unsupported browser: {browser_choice}")


def run_duckduckgo_search(query: str, browser_choice: str = "chrome") -> dict:
    """Run a DuckDuckGo search using system-installed browser."""
    with sync_playwright() as p:
        browser = get_browser(p, browser_choice)
        page = browser.new_page()
        page.goto("https://duckduckgo.com/")

        page.fill("input[name='q']", query)
        page.press("input[name='q']", "Enter")

        page.wait_for_selector("a.result__a")
        results = page.locator("a.result__a").all_text_contents()

        browser.close()

    return {
        "query": query,
        "browser": browser_choice,
        "results": results[:5],
    }



====/

from fastapi import FastAPI
from pydantic import BaseModel
from tests.duckduckgo_test import run_duckduckgo_search

app = FastAPI(title="Playwright POC with System Browsers")

class TestRequest(BaseModel):
    query: str
    browser: str = "chrome"  # can be "chrome" or "msedge"

@app.post("/run-test")
def run_test(request: TestRequest):
    """Trigger DuckDuckGo Playwright test via API."""
    try:
        result = run_duckduckgo_search(request.query, request.browser)
        return {"status": "ok", "data": result}
    except Exception as e:
        return {"status": "error", "message": str(e)}




=====


