import json
import logging
from pathlib import Path
from typing import Dict

logger = logging.getLogger(__name__)

class MappingLoader:
    """
    Loads and manages multiple mapping JSON files.
    Each file represents one environment/scope (e.g., legacy, mod, reserve).
    """

    def __init__(self, base_path: str = "data"):
        self.base_path = Path(base_path)
        self.mappings: Dict[str, Dict[str, str]] = {}

    def load_mapping(self, name: str, filename: str) -> None:
        """Load a mapping JSON file into memory under a given name."""
        file_path = self.base_path / filename
        if not file_path.exists():
            logger.warning(f"Mapping file {file_path} not found.")
            self.mappings[name] = {}
            return

        try:
            with file_path.open("r") as f:
                self.mappings[name] = json.load(f)
                logger.info(f"Loaded mapping file {filename} into scope '{name}'")
        except Exception as e:
            logger.error(f"Failed to load {filename}: {e}")
            self.mappings[name] = {}

    def get_mapping(self, name: str) -> Dict[str, str]:
        """Retrieve the mapping dictionary by scope name (legacy, mod, reserve)."""
        return self.mappings.get(name, {})




from rapidfuzz import process
from typing import Dict, Tuple, Optional

class FuzzyMatcher:
    """
    Fuzzy matches a given query against a mapping dictionary.
    """

    def __init__(self, mapping: Dict[str, str]):
        self.mapping = mapping

    def match(self, query: str, score_cutoff: int = 70) -> Optional[Tuple[str, str, int]]:
        """
        Match query string against mapping keys.

        Returns:
            (best_key, mapped_value, score) if match found, else None.
        """
        if not self.mapping:
            return None

        best_match = process.extractOne(query, self.mapping.keys(), score_cutoff=score_cutoff)
        if best_match:
            key, score, _ = best_match
            return key, self.mapping[key], score
        return None

